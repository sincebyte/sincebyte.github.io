[{"authors":[],"categories":[],"content":"mac stage manager 提供了一个真正无打扰的工作环境.\nTable of Contents 最近使用 macos 的 stage manager, 感觉十分清爽. stage manager 提供了一个真正无打扰的环境, 在此模式下可以屏蔽其他的窗口, 只显示当前窗口. 甚至可以屏蔽桌面的文件, 因此好看的壁纸可以 “无污染” 的展示了. 不过非常可惜的是, stage manager 未提供切换不同 application 的快捷键设置. 倘若使用 Alfred 等软件又无法一键切换应用, 幸运的是我们可以使用 mac 提供的 Automator 来实现一键切换应用.\n首先, 打开 Automator.app \u0026gt; File new (command N) \u0026gt; Quick Action \u0026gt; Run AppleScript\n输入如下代码, 并使用播放按键, 进行简单测试. 如果能成功切换至 Emacs 说明程序生效了.\n接下来将此 Automator 程序保存并命名 OpenEmacs\n1 on run {input, parameters} 2 3 (* Your script goes here *) 4 tell application \u0026quot;Emacs\u0026quot; 5 activate 6 end tell 7 8 end run 其次,我们为 OpenEamcs 设置一个快捷键. 打开 System Settings.app \u0026gt; Keyboard \u0026gt; Keyboard Shortcuts \u0026gt; Service \u0026gt; General\n选择 OpenEmacs 并设置快捷键. 保存后使用快捷键进行测试.\n我自己将 command + R 设置为 Chrome 的快捷键. 将 command + K 设置为 Emacs 的快捷键.\n注意 Keyboard 的快捷键可能和系统的快捷键以及和app内置的快捷键冲突,\n经测试发现 Keyboard 的快捷键有先级比较低, 如过冲突则按键事件无法抵达 Automator.\n因此需要根据大家的应用情况设置合理的快捷键\n","permalink":"/posts/stage%E5%BF%AB%E6%8D%B7%E9%94%AE/","series":[],"tags":[],"title":"Stage快捷键"},{"authors":[],"categories":[],"content":"是一款脚本绘图语言程序, 提供丰富的特性, 其中我最喜欢的功能包括可生成箭头流动效果\nTable of Contents Introduction Usage Org mode TALA License Introduction D2 是一款脚本绘图语言程序, 提供丰富的特性 , 其中我最喜欢的功能包括可生成箭头流动效果,简洁的语法, 避免使用 quote (引号) 对空格的支持, 多类型的布局等等, 我们首先说下 D2 的布局, 一共分为3种布局\ndagre ,一种有向图, 基于 Graphviz’s DOT 算法不布局, 如果你很熟悉dot 不妨试试这种布局 ELK ,也是一种有向图, 但官方宣称比dagre更成熟 TALA, 全新的 付费 布局引擎, 官方宣称是特别针对软件框架图而设计的布局 综合来说, 其实官方也没说的很明白,不过由于 TALA 是付费的布局,有专门的网站和演示案例. 确实让人心动.幸运的是虽说 TALA 是付费的,但他却提供软件的源代码,我们仍然可以使用 TALA 布局只不过在生成出来的图片中含有 LICENSE COPY 的水印（后面讲怎么去除）.\nUsage 你的第一个D2架构图,代码如下.\ndirection 代表了布局的方向, style.fill 代表了背景图与 dot 和 plantuml 一样,都可以支持透明背景 transparent. d2支持我们定义一些预置的 class 样式,见classes代码片段. 连接线的样式中有我们喜闻乐见的 style.animated 这就是连接线动态效果的设置. 在最新的 v0.6.0 中,可以通过在vars对象中的键值对来申明变量,这极大方便了我们在画图时对颜色和属性的重复引用. 在最新的 v0.6.0 中,可以使用通配符来指定节点的样式 *.style.fill（目前仅针支持节点,不支持连接线）. 接下来我声明了A、B、C 3个节点,并且分别引用 2dn(2d node) 和 3dn(3d node).\ndirection : right style.fill : transparent vars: { nodecolor : \u0026quot;#E67E22\u0026quot; style-stroke : \u0026quot;#17202A\u0026quot; style-stroke-width : 2 style-fill-pattern : dots style-shadow : true line-style-fill : \u0026quot;#884EA0\u0026quot; } classes: { 2dn: { style.multiple : true } 3dn: { style.3d : true } 2de: { style.animated : true style.stroke-width : ${style-stroke-width} style.stroke : ${line-style-fill} } } A : { class : 2dn } B : { class : 3dn } C : { class : 3dn } A -\u0026gt; B -\u0026gt; C -\u0026gt; D{ class : 2de } *.style.fill : ${nodecolor} *.style.stroke : ${style-stroke} *.style.stroke-width : ${style-stroke-width} *.style.fill-pattern : ${style-fill-pattern} *.style.shadow : ${style-shadow} Org mode 最后分享如何在 org mode 中使用d2.\n在 org mode 中引入新的 src block 执行代码块,你可以使用如下代码作为参考.我在这里增加了d2的手绘风格的代码,其原因是d2的部分设置需要在命令行上进行设置.类似于图片间宽、布局引擎、动画速率等参数均是通过命令行参数来设置的,无法在src block内进行设定.因此我在fish内增加了软连接带入默认参数,以此来实现在org mode中进行不同风格的d2设置切换.\nalias ds2 \u0026quot;~/soft/d2-v0.6.0/bin/d2 --sketch --animate-interval=1400 -l elk -c --pad 0\u0026quot; ;;; ds2.el --- Babel Functions for ds2 -*- lexical-binding: t; -*- ;; Copyright (C) 2009-2022 Free Software Foundation, Inc. ;; Author: Eric Schulte ;; Maintainer: Justin Abrahms \u0026lt;justin@abrah.ms\u0026gt; ;; Keywords: literate programming, reproducible research ;; URL: https://orgmode.org ;; This file is part of GNU Emacs. ;; GNU Emacs is free software: you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published by ;; the Free Software Foundation, either version 3 of the License, or ;; (at your option) any later version. ;; GNU Emacs is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details. ;; You should have received a copy of the GNU General Public License ;; along with GNU Emacs. If not, see \u0026lt;https://www.gnu.org/licenses/\u0026gt;. ;;; Commentary: (require 'org-macs) (org-assert-version) (defvar org-babel-default-header-args:ds2 '((:results . \u0026quot;file\u0026quot;) (:exports . \u0026quot;results\u0026quot;)) \u0026quot;Default arguments to use when evaluating a ds2 source block.\u0026quot;) (defun org-babel-expand-body:ds2 (body params) \u0026quot;Expand BODY according to PARAMS, return the expanded body.\u0026quot; (let ((vars (org-babel--get-vars params))) (mapc (lambda (pair) (let ((name (symbol-name (car pair))) (value (cdr pair))) (setq body (replace-regexp-in-string (concat \u0026quot;$\u0026quot; (regexp-quote name)) (if (stringp value) value (format \u0026quot;%S\u0026quot; value)) body t t)))) vars) body)) (defun org-babel-execute:ds2 (body params) \u0026quot; This function is called by `org-babel-execute-src-block'.\u0026quot; (let* ((out-file (cdr (or (assq :file params) (error \u0026quot;You need to specify a :file parameter\u0026quot;)))) (cmdline (or (cdr (assq :cmdline params)))) (cmd (or (cdr (assq :cmd params)) (concat \u0026quot;ds2 \u0026quot; \u0026quot;\u0026quot;))) (coding-system-for-read 'utf-8) ;use utf-8 with sub-processes (coding-system-for-write 'utf-8) (in-file (org-babel-temp-file \u0026quot;ds2-\u0026quot;))) (with-temp-file in-file (insert (org-babel-expand-body:ds2 body params))) (org-babel-eval (concat cmd \u0026quot; \u0026quot; (org-babel-process-file-name in-file) \u0026quot; \u0026quot; cmdline \u0026quot; \u0026quot; (org-babel-process-file-name out-file)) \u0026quot;\u0026quot;) nil)) ;; signal that output has already been written to file (defun org-babel-prep-session:ds2 (_session _params) \u0026quot;Return an error because ds2 does not support sessions.\u0026quot; (error \u0026quot;ds2 does not support sessions\u0026quot;)) (provide 'ds2) TALA License 经常性的在 org mode 中导出 html ,遇到最多的问题是,当我们把 html 发送给其他人时,里面的图片就不能打开了.这是因为我们发送出去的仅是 html 代码, 只包括了图片地址,不包括图片的内容. 为了解决这个问题,我们可以在生成 html 的同时将图片以base64的形式直接嵌入至html文件内.\nd2 的 TALA 布局是一个收费的布局引擎,但幸运的是尽管他收费,但是却开源.我们仍然可以下载TALA引擎的二进制执行文件,只不过在未授权的时候会在图片中生成 UNLICENSED COPY 的水印.svg的水印很好去除,用text-mode打开文件,找到水印字样删除即可.利用上面的在将图片转换成BASE64的时候我们仅需要将 UNLICENSED COPY 替换成空就完成了水印去除了.\n;; html image base64 (defun org-html--format-image-old (source attributes info) (org-html-close-tag \u0026quot;img\u0026quot; (org-html--make-attribute-string (org-combine-plists (list :src source :alt (if (string-match-p (concat \u0026quot;^\u0026quot; org-preview-latex-image-directory) source) (org-html-encode-plain-text (org-find-text-property-in-string 'org-latex-src source)) (file-name-nondirectory source))) (if (string= \u0026quot;svg\u0026quot; (file-name-extension source)) (org-combine-plists '(:class \u0026quot;org-svg\u0026quot;) attributes '(:fallback nil)) attributes))) info)) (defun org-org-html--format-image (source attributes info) ;; doc (if (string-match \u0026quot;http\u0026quot; source) (org-html--format-image-old source attributes info) (format \u0026quot;\u0026lt;img src=\\\u0026quot;data:image/%s+xml;base64,%s\\\u0026quot;%s width=%s /\u0026gt;\u0026quot; (or (file-name-extension source) \u0026quot;\u0026quot;) (base64-encode-string (with-temp-buffer (insert-file-contents-literally source) (string-replace \u0026quot;UNLICENSED COPY\u0026quot; \u0026quot; \u0026quot; (buffer-string)))) (file-name-nondirectory source) \u0026quot;100%\u0026quot;))) (advice-add #'org-html--format-image :override #'org-org-html--format-image) ","permalink":"/posts/%E4%BD%BF%E7%94%A8d2%E7%BB%98%E5%9B%BE/","series":[],"tags":[],"title":"使用d2绘图"},{"authors":[],"categories":[],"content":"springcloud 整合 shardingsphere 及 seata, 为分布式事务的场景提供了十分优雅的解决方案\n垂直 vs 水平 拆分 垂直分库，把单一数据库按业务进行划分，做到专库专表\n垂直分表，把表中的一部分数据列存储到一张表，再将另外一部分数据列存储到另外一张或多张表，这种方式叫垂直分表\n垂直分，都是切分表头，更多考虑微服务划分和数据库设计。\n水平分库，表的数据一部分存储在一个数据库，另一部分数据存储在另外一个数据库中\n水平分表，表的数据一部分存储在一个表，另一部分数据存储在另外一个表中\n水平分，都是切表体\n分库分表带来的问题：\n跨节点连接查询问题，分页、排序 多数据源管理问题， springcloud 整合 shardingsphere 及 seata 依赖 依赖我们选择引入、spring-cloud-starter-alibaba-seata 作为 seata 的起步依赖、sharding-jdbc-spring-boot-starter 作为 shardingshpere 分库分表的核心依赖、sharding-transaction-base-seata-at 作为 shardingsphere 支持 seata-at 模式的依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-seata\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${depend on you springcloud version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.shardingsphere\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sharding-jdbc-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.shardingsphere\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sharding-transaction-base-seata-at\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 数据库环境 模拟分库（最常见的方案），模拟将数据分库存储至 2 个不同的库，首先创建好 2 个数据库 cube_ld_archetype_dev_1、cube_ld_archetype_dev_1，并且创建相同的表 t_ld_daily_user_d。\ndelimiter ; CREATE TABLE cube_ld_archetype_dev_1.t_ld_daily_user_d ( `id` bigint NOT NULL, `name` varchar(16) NOT NULL COMMENT '姓名', `dd_union_id` varchar(32) DEFAULT NULL COMMENT '钉钉 id', `gender` tinyint NOT NULL COMMENT '性别，1 男 2 女', `mobile` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `phone` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', `modifier` bigint NOT NULL DEFAULT '-1' COMMENT '修改人', `creator` bigint NOT NULL DEFAULT '-1' COMMENT '创建人', `tenant_id` bigint NOT NULL DEFAULT '-1' COMMENT '租户', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COMMENT='用户表'; CREATE TABLE cube_ld_archetype_dev_2.t_ld_daily_user_d ( `id` bigint NOT NULL, `name` varchar(16) NOT NULL COMMENT '姓名', `dd_union_id` varchar(32) DEFAULT NULL COMMENT '钉 钉 id', `gender` tinyint NOT NULL COMMENT '性别，1 男 2 女', `mobile` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `phone` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL, `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', `modifier` bigint NOT NULL DEFAULT '-1' COMMENT '修改人', `creator` bigint NOT NULL DEFAULT '-1' COMMENT '创建人', `tenant_id` bigint NOT NULL DEFAULT '-1' COMMENT '租户', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COMMENT='用户表'; 由于使用了 seata 的 at 模式，因此需要在每个库创建 undo_log 表\ndelimiter ; CREATE TABLE IF NOT EXISTS cube_ld_archetype_dev_1.`undo_log` ( `branch_id` BIGINT NOT NULL COMMENT 'branch transaction id', `xid` VARCHAR(128) NOT NULL COMMENT 'global transaction id', `context` VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization', `rollback_info` LONGBLOB NOT NULL COMMENT 'rollback info', `log_status` INT(11) NOT NULL COMMENT '0:normal status,1:defense status', `log_created` DATETIME(6) NOT NULL COMMENT 'create datetime', `log_modified` DATETIME(6) NOT NULL COMMENT 'modify datetime', UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table'; ALTER TABLE cube_ld_archetype_dev_1.`undo_log` ADD INDEX `ix_log_created` (`log_created`); CREATE TABLE IF NOT EXISTS cube_ld_archetype_dev_2.`undo_log` ( `branch_id` BIGINT NOT NULL COMMENT 'branch transaction id', `xid` VARCHAR(128) NOT NULL COMMENT 'global transaction id', `context` VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization', `rollback_info` LONGBLOB NOT NULL COMMENT 'rollback info', `log_status` INT(11) NOT NULL COMMENT '0:normal status,1:defense status', `log_created` DATETIME(6) NOT NULL COMMENT 'create datetime', `log_modified` DATETIME(6) NOT NULL COMMENT 'modify datetime', UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table'; ALTER TABLE cube_ld_archetype_dev_2.`undo_log` ADD INDEX `ix_log_created` (`log_created`); 编写配置 由于使用了 springcloud-seata 和 springcloud-shardingsphere 的依赖，因此可以直接在注册中心上进行配置;\n可以使用 2 个配置文件来进行 seata 和 shardingsphere 分开配置；\nsharingsphere 配置使用 tenant_id 来进行分库；\nseata 配置, 此配置可在 nacos 配置中心完成\nseata: config: type: nacos nacos: server-addr: ${spring.cloud.nacos.config.server-addr} group: SEATA_GROUP namespace: ${spring.cloud.nacos.config.namespace} username: ${nacos.username} password: ${nacos.password} cluster: default data-id: seataServer.properties registry: type: nacos nacos: server-addr: ${spring.cloud.nacos.discovery.server-addr} group: SEATA_GROUP namespace: ${spring.cloud.nacos.discovery.namespace} username: ${nacos.username} password: ${nacos.password} application: seata-server cluster: default tx-service-group: default_tx_group service: vgroup-mapping: default_tx_group: default enable-auto-data-source-proxy: true data-source-proxy-mode: AT shardingsphere 配置，此配置可在 nacos 配置中心完成\nspring: jackson: time-zone: Asia/Shanghai cache: type: none shardingsphere: dataSource: names: ds1,ds2 ds1: type: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.cj.jdbc.Driver jdbc-url: jdbc:mysql://dsip1:3306/cube_ld_archetype_dev_1?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp; serverTimezone=Asia/Shanghai\u0026amp;zeroDateTimeBehavior=convertToNull\u0026amp; autoReconnect=true\u0026amp;failOverReadOnly=false\u0026amp;maxReconnects=2\u0026amp;useSSL=false username: root password: xxx ds2: type: com.zaxxer.hikari.HikariDataSource driver-class-name: com.mysql.cj.jdbc.Driver jdbc-url: jdbc:mysql://dsip2:3306/cube_ld_archetype_dev_2?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp; serverTimezone=Asia/Shanghai\u0026amp;zeroDateTimeBehavior=convertToNull\u0026amp; autoReconnect=true\u0026amp;failOverReadOnly=false\u0026amp;maxReconnects=2\u0026amp;useSSL=false username: root password: xxx sharding: tables: t_ld_daily_user_d: database-strategy: inline: sharding-column: tenant_id algorithm-expression: ds$-\u0026gt;{tenant_id % 2 + 1} seata.conf 这一步是 shardingsphere 与 seata 整合的配置，此配置需要在项目的 resource 目录下，目前不是很优雅，但是要实现在 nacos 上配置也不难。\nsharding.transaction.seata.at.enable=true client.application.id=archetype client.transaction.service.group=default_tx_group 编写代码 注意：@Transactional 和 @ShardingTransactionType 注解必须同时添加才能使分布式事务生效 TransactionType.BASE 其实就是 shardingsphere 对于弱一致性事务的定义，在这里可理解 TransactionType.BASE 是 seata at 事务的映射。 当然除了弱一致性以外，还有强一致性 XA 事务，seata 默认也是支持的，只是 XA 事务依赖数据库支持，在使用 XA 事务时你需要提前确认数据库是否支持 XA 事务。\n在下面的代码中，程序有一个除零错误，故意设计一个错误，我们期望分布式事务生效的情况下，能回滚 userMapper.insert(user1) 这行代码对数据库的操作。\n/** * save mutiple record * testing distributed transaction */ @PostMapping(\u0026quot;/saveTestShardingSphere\u0026quot;) @Transactional(rollbackFor = Exception.class) @ShardingTransactionType(TransactionType.BASE) public Result\u0026lt;Long\u0026gt; saveTestShardingSphere() { User user1 = new User(); user1.setId(1L); user1.setTenantId(1L); user1.setName(\u0026quot;van1\u0026quot;); user1.setGender(true); user1.setPhone(\u0026quot;7789\u0026quot;); user1.setDdUnionId(\u0026quot;7789\u0026quot;); userMapper.insert(user1); int errorInt = 1 / 0; User user2 = new User(); user2.setId(2L); user2.setTenantId(2L); user2.setName(\u0026quot;van2\u0026quot;); user2.setGender(true); user2.setPhone(\u0026quot;7789\u0026quot;); user2.setDdUnionId(\u0026quot;7789\u0026quot;); userMapper.insert(user2); return Result.success(); } 启动 seata-server seata 的 AT 事务要求 TC 与 RM 能双向通讯，因此在做测试的时候，常常需要在本地启动一个 seata-server（TC）以确保事务生效。\ncd $seata-server-home/bin sh seata-server.sh -p 8091 -h 172.20.10.2 -m file tail -f ../logs/start.out 启动 springcloud 项目 mvn clean -T 1C install -f ../pom.xml -Dmaven.test.skrp=true -U java \\ -Xms1024m -Xmx1024m \\ -Dspring.application.name=archetype \\ -Dspring.cloud.nacos.config.file-extension=yml \\ -Duser.timezone=GMT+08 \\ -Dserver.port=8080 \\ -Dspring.cloud.nacos.discovery.server-addr=nacos:8848 \\ -Dspring.cloud.nacos.discovery.namespace=e29572d7-7ccc-4a18-81da-dbe891677336 \\ -Dspring.cloud.nacos.config.server-addr=nacos:8848 \\ -Dspring.cloud.nacos.config.namespace=e29572d7-7ccc-4a18-81da-dbe891677336 \\ -Dspring.config.import[0]=nacos:seata-at \\ -Dspring.config.import[1]=nacos:archetype-shardingjdbcDb \\ -Dspring.cloud.nacos.discovery.register-enabled=true \\ -Dlogging.level.com.baomidou.mybatisplus=DEBUG \\ -Dmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl \\ -jar ./target/archetype.jar 接口测试 发起请求测试\nPOST http://localhost:8080/user/saveTestShardingSphere 数据库查看\ndelimiter ; -- delete from cube_ld_archetype_dev_1.t_ld_daily_user_d; -- delete from cube_ld_archetype_dev_2.t_ld_daily_user_d; SELECT * FROM cube_ld_archetype_dev_1.t_ld_daily_user_d; SELECT * FROM cube_ld_archetype_dev_2.t_ld_daily_user_d; 日志\nBranch Rollbacked result: PhaseTwo_Rollbacked 总结 shardingsphere 与 seata 的整合的确做到了配置清晰，使用简单；\n强强联合，为分布式事务的场景提供了十分优雅的解决方案；\n","permalink":"/posts/seata-shardingsphere1/","series":[],"tags":[],"title":"springcloud 整合 shardingsphere 及 seata"},{"authors":[],"categories":[],"content":"如何排查：java.lang.OutOfMemoryError: unable to create native thread\njava.lang.OutOfMemoryError: unable to create native thread 测试代码 for (int i = 0; i \u0026lt; 3500; i++) { new Thread(() -\u0026gt; { try { try {Thread.sleep(5000L);} catch (InterruptedException e) {e.printStackTrace();} TimeUnit.HOURS.sleep(1); log.info(\u0026quot;\\n==== [log]: {} {}\u0026quot;, \u0026quot;sleep over\u0026quot;,Thread.currentThread().getName()); } catch (InterruptedException e) { e.printStackTrace(); } }).start(); } 相关指令 查看进程的线程数量\njstack -l PID | grep 'java.lang.Thread.State' | wc -l jstack -l PID | grep 'java.lang.Thread.State: RUNNABLE' | wc -l jstack -l PID | grep 'java.lang.Thread.State: TIMED_WAITING' | wc -l jstack -l PID | grep 'java.lang.Thread.State: WAITING' | wc -l jstack -l PID | grep 'java.lang.Thread.State:BLOCKED' | wc -l jstack -l PID | grep 'Java-level deadlock' | wc -l 查看进程的线程状态\njstack -l PID | grep 'java.lang.Thread.State' 查看进程的线程信息\njstack -l PID 返回信息，可以看到阻塞的代码信息\n\u0026quot;Thread-4050\u0026quot; #4136 prio=5 os_prio=31 cpu=1.00ms elapsed=546.19s tid=0x0000000130247000 nid=0x354103 waiting on condition [0x00000004b9a2e000] java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(java.base@11.0.13/Native Method) at java.lang.Thread.sleep(java.base@11.0.13/Thread.java:334) at java.util.concurrent.TimeUnit.sleep(java.base@11.0.13/TimeUnit.java:446) at com....controller.CommentsController$$M$_jr_0E50A6F6C7FE22B0_1 .lambda$0(CommentsController.java:129) at com....controller.CommentsController$$Lambda$964$$M$_jr_0E50A6F6C7FE22B0_1 /0x0000000800e11c40.run(Unknown Source) at java.lang.Thread.run(java.base@11.0.13/Thread.java:829) ","permalink":"/posts/java-oom/","series":[],"tags":[],"title":"java 栈溢出问题排查"},{"authors":[],"categories":[],"content":"RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。\n简介 项目地址：https://github.com/apache/rocketmq/tree/master\nRocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。\n消息的发布是指某个生产者向某个topic发送消息；消息的订阅是指某个消费者关注了某个topic中带有某些tag的消息，进而从该topic消费数据。\n架构 NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。\nBroker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。 注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。\nProducer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。\nConsumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。\nRocketMQ架构上主要分为四部分，如上图所示:\nProducer：消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。\nConsumer：消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。\nNameServer：NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer和Consumer仍然可以动态感知Broker的路由的信息。\nBrokerServer：Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。\nRemoting Module：整个Broker的实体，负责处理来自Client端的请求。 Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息。 Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。 HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。 Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。 部署 结合部署架构图，描述集群工作流程：\n启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。 Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。 收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。 Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。 Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。 单节点部署 设置环境变量 1 set -x ROCKETMQ_HOME /Users/van/soft/rocketMQ 下载项目至ROCKETMQ_HOME文件目录，\nhttps://github.com/apache/rocketmq/tree/master\n下载项目至ROCKETMQ_HOME文件目录，\nhttps://github.com/apache/rocketmq-dashboard\n启动NameServer 1 nohup sh $ROCKETMQ_HOME/rocketmq-4.9.3/bin/mqnamesrv \u0026amp; 2 tail -f ~/logs/rocketmqlogs/namesrv.log 3 jps 启动borkerServer 1 nohup sh $ROCKETMQ_HOME/rocketmq-4.9.3/bin/mqbroker -n localhost:9876 \u0026amp; 2 tail -f ~/logs/rocketmqlogs/broker.log 3 jps 启动管理端 项目地址：https://github.com/apache/rocketmq-dashboard\n修改nameserver地址，application.yml\n1 ... 2 namesrvAddrs: 3 - 127.0.0.1:9876 4 ... 启动命令\nmvn springboot:run 访问地址：http://localhost:8080/#/topic\n消息发送和消费测试 1 #bash 2 export NAMESRV_ADDR=localhost:9876 3 #fish 4 set -x NAMESRV_ADDR localhost:9876 5 sh $ROCKETMQ_HOME/rocketmq-4.9.3/bin/tools.sh org.apache.rocketmq.example.quickstart.Producer 6 sh $ROCKETMQ_HOME/rocketmq-4.9.3/bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer 复制和刷盘策略 复制策略：同步复制、异步复制，broker master与 slaver 之间数据同步策略\n刷盘策略：同步刷盘、异步刷盘，异步刷盘一般是将数据存储至pageCache,达到一定数量时自动进行落盘\nblocker 集群模式 单Master 只有一个blocker，只能在测试时使用，有单点故障\n多Master broker仅由多个master构成，不存在slaver。同一个topic的各个queue会平均分布至多个master节点。\n优点：配置简单、单个master宕机对集群没影响。前提是需要配置磁盘阵列。raid磁盘阵列的效率要高于master-slaver集群，raid是硬件支持，成本较高。\n缺点：未恢复之前，该机器上的消息不能被消费，消息时时性会受到影响。\n多Master多Slaver-异步复制 master与slaver之间是主备关系，即master负责消息的读写请求，而slaver仅负责消息的备份，mater宕机后的角色自动切换。\n由于是异步负责，在切换过程中可能会涉及少量消息丢失。取决于master向slaver同步数据的时机。\n多Master多Slaver-同步双写 消息写入master后，等待master将信息同步至slaver成功后，返回成功。\n优点：不存在丢失\n缺点：单个消息的RT高，导致性能要略低（约10%），master宕机后不会自动切换至slaver。\nRocketMq工作原理 消息的生产过程 Producer发送消息之前，会先向nameserver请求消息topic的路由信息 nameserver返回该topic的路由表和broker列表\n路由表：map，key为topic名称、value是一个queueData实例列表，即只要涉及到该topic的broker，一个broker对应一个queue,Queuedata中包含brokerName。简单来说，路由表的value为所有涉及该topic的brokerName\nrouterMap\u0026lt;topicName,List\u0026gt;,queueData: brokerName\nBorker列表：Map\u0026lt;brokerName、brokerDataMap\u0026gt;, brokerDataMap\u0026lt;brokerId,brokerIp\u0026gt; Producer根据消息的选择策略，从queue列表中选出一个队列，用于后续存储消息 Producer对消息做一些特殊出理，例如消息超过4M，对消息进行压缩 producer向选择出的queue所在的broker发出rpc请求，将消息发送到选择出的queue queue选择算法 轮询算法，每个queue可均匀收到消息，由于需要等到投递成功后才能进行下个节点的轮询，因此该算法存在在生产者端消息积压问题，影响消息的投递性能。 最小投递延迟算法，将消息投递至延迟最小的queue,可有效提升消息的投递性能。问题是可能出现单机过热，消息分配不均。 消息存储 数据存储在home/store目录下，该目录在启动时创建，正常关闭broker该消息会自动消失，如果启动前发现此文件存在，则说明之前是非正常关闭。 其中存储着commitlog文件，而消息是写在commitlog文件中的 config目录，存放着broker运行期间的一些配置数据 consumequeue, 存储着消费队列 index存储着消息索引文件 lock:运行期间使用到的全局资源锁 commitlog文件 偏移量 索引文件 Reblance 没次新增或者删除消费者的时候都会触发reblance，reblance会导致消息积压和消息重复消费的问题。\n另外如果消费者数量大于queue时，消息只会负载至有限的消费者，这个叫reblance的限制\n","permalink":"/posts/rocketmqintroduction/","series":[],"tags":[],"title":"RocketMQ 必须知道的理论知识"},{"authors":[],"categories":[],"content":"使用 Emacs 导出 html 样式，类似于 doom emacs doc 的 css style\n样式引用：https://docs.doomemacs.org/latest/#/modules\n一个类 doom doc 的 org html 样式模版 点此预览🪄\n使用 配置 snippet 模版，然后在 org mode 文件中使用 tt tab 就可展开此模版。\n# -*- mode: snippet -*- # name: title # key: tt # -- #+title: `(file-name-sans-extension (buffer-name))` #+SUBTITLE: this is subtitle #+AUTHOR: autor #+HTML_HEAD: \u0026lt;script src=\u0026quot;scroll.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; #+HTML_HEAD: \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;org_css.css\u0026quot;/\u0026gt; #+HTML_HEAD: \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; #+OPTIONS: prop:nil timestamp:t \\n:t ^:nil f:t toc:t author:t num:t H:2 #+LATEX_COMPILER: xelatex #+LATEX_CLASS: elegantpaper #+MACRO: htmlred @@html:\u0026lt;font color=\u0026quot;red\u0026quot;\u0026gt;\u0026lt;/font\u0026gt;@@ #+MACRO: latexred @@latex:{\\color{red}@@@@latex:}@@ #+latex:\\newpage 想使用在线版的静态文件，可以使用下面的配置进行替换\n#+HTML_HEAD: \u0026lt;link href=\u0026quot;https://emacs-1308440781.cos.ap-chengdu.myqcloud.com/org_css.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt;\u0026lt;/link\u0026gt; #+HTML_HEAD: \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; #+HTML_HEAD: \u0026lt;script src=\u0026quot;https://emacs-1308440781.cos.ap-chengdu.myqcloud.com/scroll.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 字体样式 Table 1: 字体样式说明 粗体 bold 斜体 italic 下划线 underlined 中横线 strike-through 代码，按键 code 特殊说明 quote 摘要、引用 可使用`quote`来进行代码块补全，表示摘要，引用\nTECO - Tape [later text] Editor/COrrector\nA combination text editor/really horrible ProgrammingLanguage. To quote the paper “RealProgrammers don’t use Pascal” (1983):\nnotice 注意事项、提醒 你有许多已标记的项目并且你可能错过一个重要的项目时，提醒可以提供帮助\nPlease do not file or answer Doom Emacs issues on Reddit, Twitter, or StackOverflow. Kindly refer them to this section.\n这是 1 个例子\n段落及高亮 Example of an comment.\n原文：用友 bip 产品功能说明 ，在说明文档\n大数据中 最宝贵 、最难以代替的就是数据，一切都围绕数据。\nHDFS 是最早的大数据存储系统，存储着宝贵的数据资产，各种新算法、框架要想得到广泛使用，必须支持 HDFS，才能获取已存储在里面的数据。所以大数据技术越发展，新技术越多，HDFS 得到的支持越多，越离不开 HDFS。HDFS 也许不是最好的大数据存储技术，但依然是最重要的大数据存储技术。\nHDFS 是如何实现大数据高速、可靠的存储和访问的呢？\nHadoop 分布式文件系统 HDFS 的设计目标是管理数以千计的服务器、数以万计的磁盘，将大规模的服务器计算资源当作一个单一存储系统进行管理，对应用程序提供数以 PB 计的存储容量，让应用程序像使用普通文件系统一样存储大规模的文件数据。 表格 C-c ~ to convert to tabel.el table\nC-c ~ to convert to org table\norg table M-h M-l for move Columns left and right\norg table M-k M-j for move Rows up and down\n# table.el for merge Columns or Rows Table 2: square N N^2 N^3 N^4 sqrt(n) sqrt[4](N) 1 1 1 1 1 1 2 4 8 16 1.4142136 1.1892071 3 9 27 81 1.7320508 1.3160740 Table 3: student Student Prob 1 Prob 2 Prob 3 Total Note Maximum 10 15 25 50 10.0 Peter 10 8 23 41 8.2 Sam 2 4 3 9 1.8 Average \u0026#xa0; \u0026#xa0; \u0026#xa0; 25.0 \u0026#xa0; Table 4: long table Format Fine-grained-control Initial Effort Syntax simplicity Editor Support Integrations Ease-of-referencing Versatility Word Word^2 Word^3 Word^4 sqrt(Word) sqrt(sqrt(Word)) 2 2 LaTeX LaTeX^2 LaTeX^3 LaTeX^4 sqrt(LaTeX) sqrt(sqrt(LaTeX)) 4 3 Org Mode Org^2 Mode^2 Org^3 Mode^3 Org^4 Mode^4 sqrt(Org Mode) sqrt(sqrt(Org Mode)) 4 4 Markdown Markdown^2 Markdown^3 Markdown^4 sqrt(Markdown) sqrt(sqrt(Markdown)) 3 1 Markdown + Pandoc (Markdown + Pandoc)^2 (Markdown + Pandoc)^3 (Markdown + Pandoc)^4 sqrt(Markdown + Pandoc) sqrt(sqrt(Markdown + Pandoc)) 3 2 awk 表格 aardvark 555-5553 1200/300 B alpo-net 555-3412 2400/1200/300 A barfly 555-7685 1200/300 A bites 555-1675 2400/1200/300 A camelot 555-0542 300 C core 555-2912 1200/300 C fooey 555-1234 2400/1200/300 B foot 555-6699 1200/300 B macfoo 555-6480 1200/300 A sdace 555-3430 2400/1200/300 A sabafoo 555-2127 1200/300 C /foo/ { print $0 } Table 5: 筛选出 foo 匹配的行 fooey 555-1234 2400/1200/300 B foot 555-6699 1200/300 B macfoo 555-6480 1200/300 A sabafoo 555-2127 1200/300 C 表格自增 id 0 字段名 名称 1 age 年龄 2 bir 出生年月日 #+tblfm: $1=@#-1 C-c C-c to execute it\nLaTex 公式 $\\mbox{需求的价格弹性系数} = \\frac{\\mbox{需求的变动率}}{\\mbox{价格的变动率}}$ $$\\mbox{需求的价格弹性系数} = \\frac{\\mbox{需求的变动率}}{\\mbox{价格的变动率}}$$\n$$\\begin{aligned} \\cos 3\\theta \u0026amp; = \\cos (2 \\theta + \\theta) \\ \u0026amp; = \\cos 2 \\theta \\cos \\theta - \\sin 2 \\theta \\sin \\theta \\ \u0026amp; = (2 \\cos ^2 \\theta -1) \\cos \\theta - (2 \\sin \\theta\\cos \\theta ) \\sin \\theta \\ \u0026amp; = 2 \\cos ^3 \\theta - \\cos \\theta - 2 \\sin ^2 \\theta \\cos \\theta \\ \u0026amp; = 2 \\cos ^3 \\theta - \\cos \\theta - 2 (1 - \\cos ^2 \\theta )\\cos \\theta \\ \u0026amp; = 4 \\cos ^3 \\theta -3 \\cos \\theta \\end{aligned} $$\nOrg 代码 代码片段开启行号，修改 `~/.emacs.d/.local/straight/repos/org/lisp/ox-html.el`\n(let* ((code-lines (split-string code \u0026quot;\\n\u0026quot;)) (code-length (length code-lines)) (num-fmt (and num-start (format \u0026quot;%%%ds \u0026quot; (format \u0026quot;%%%ds: \u0026quot; Java 代码 /** * @param request 调用的请求参数 * @param needLog true 需要记录日志 false 不记录日志 * @return */ protected NcApiResponse runApply(NcApiRequest request, Boolean needLog) { NcApiResponse ncApiResponse = null; try { final NcApiRequest ncApiRequest = executeBefore(request); ncApiResponse = executeGetRequest(ncApiRequest); } catch (Exception e) { afterExecute(needLog, e, request, ncApiResponse); if (e instanceof BizException) { throw new BizException(\u0026quot;NC 提示\u0026quot;, ((BizException) e).getErrorMsg(), e); } else { throw new BizException(\u0026quot;NC 异常\u0026quot;, e.getMessage()); } } return ncApiResponse; } babel java List\u0026lt;Integer\u0026gt; a = Arrays.asList(1, 2); List\u0026lt;Integer\u0026gt; a = Arrays.asList(1, 2); List\u0026lt;Integer\u0026gt; a = Arrays.asList(1, 2); List\u0026lt;Integer\u0026gt; a = Arrays.asList(1, 2); List\u0026lt;Integer\u0026gt; a = Arrays.asList(1, 2); return a; C-c C-c to execute it, but export to html will fail when the babel java result generated.\n图片 引用本地图片 引用网络图片 dot graphviz dot\ndot sk\nplantuml plantuml with style css\nplantuml 替换原生样式\nDARKO RANGE/LIGHTORANGE/DARKBLUE/LIGHTBLUE/DARKRED/LIGHTRED/DARKGREEN/LIGHTGREEN\n!define LIGHTORANGE !includeurl C4-PlantUML/juststyle.puml plant uml 系统 Contex 架构图\nplantuml 替换原生样式\nDARKORANGE/LIGHTORANGE/DARKBLUE/LIGHTBLUE/DARKRED/LIGHTRED/DARKGREEN/LIGHTGREEN\n!define LIGHTBLUE !includeurl C4-PlantUML/juststyle.puml 泳道图\nplantuml htmlstyle\norg 转 Word pandoc -o ~/Desktop/out.docx ~/.doom.d/README.org 插入时间 C-c . 插入当前时间 \u0026lt;2023-02-25 Sat\u0026gt; K lask week J next week L next day ","permalink":"/posts/orgmodecss/","series":[],"tags":[],"title":"推荐一款 org mode 导出 html 的样式"}]